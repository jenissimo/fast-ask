#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è FastAsk —Å –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
"""

import os
import logging
import markdown
from enum import Enum
from datetime import datetime
from PyQt6.QtWidgets import (
    QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
    QTextEdit, QPushButton, QLabel, QListWidget, QListWidgetItem,
    QFrame, QGraphicsDropShadowEffect, QGraphicsOpacityEffect,
    QScrollArea, QApplication
)
from PyQt6.QtCore import Qt, QSize, pyqtSignal, QTimer, QPropertyAnimation, QEasingCurve
from PyQt6.QtGui import QIcon, QColor, QKeySequence, QShortcut, QFontMetrics, QClipboard

class Mode(Enum):
    """–†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã –æ–∫–Ω–∞"""
    HISTORY = 0
    INPUT = 1
    ANSWER = 2

class ModernWindow(QMainWindow):
    """–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è FastAsk"""
    
    # –°–∏–≥–Ω–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ API
    send_request = pyqtSignal(str, object)
    
    # –°–∏–≥–Ω–∞–ª –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    stop_generation = pyqtSignal()
    
    def __init__(self, app):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        super().__init__()
        
        self.app = app
        self.screenshot = None
        
        # –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.current_mode = Mode.HISTORY
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∫–Ω–æ
        self._setup_window()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self._init_ui()
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
        self._connect_signals()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
        self.is_generating = False
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤
        self._load_history()
        
        logging.info("–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
    
    def _setup_window(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–∫–Ω–∞"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
        self.setWindowTitle("FastAsk")
        self.setWindowFlags(Qt.WindowType.FramelessWindowHint | Qt.WindowType.WindowStaysOnTopHint)
        self.setAttribute(Qt.WidgetAttribute.WA_TranslucentBackground)
        self.setMinimumSize(600, 400)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –ø–µ—Ä–µ–¥ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        self.resize(700, 500)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∑–∏—Ü–∏–∏ –∏ —Ä–∞–∑–º–µ—Ä–∞
        geometry = self.app.settings.value("mainwindow/geometry")
        if geometry:
            self.restoreGeometry(geometry)
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –Ω–∞ —ç–∫—Ä–∞–Ω–µ
            self.center_on_screen()
    
    def _init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        self.central_widget = QWidget()
        self.setCentralWidget(self.central_widget)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç —Ç–µ–Ω–∏
        shadow = QGraphicsDropShadowEffect()
        shadow.setBlurRadius(20)
        shadow.setColor(QColor(0, 0, 0, 100))
        shadow.setOffset(0, 0)
        self.central_widget.setGraphicsEffect(shadow)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –ª–µ–π–∞—É—Ç
        self.main_layout = QVBoxLayout(self.central_widget)
        self.main_layout.setContentsMargins(20, 20, 20, 20)
        self.main_layout.setSpacing(10)
        
        # –°–æ–∑–¥–∞–µ–º –∏ —Å—Ç–∏–ª–∏–∑—É–µ–º —Ñ—Ä–µ–π–º –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Ñ–æ–Ω–∞
        self.bg_frame = QFrame(self.central_widget)
        self.bg_frame.setObjectName("bgFrame")
        self.bg_frame.setStyleSheet("""
            QFrame#bgFrame {
                background-color: rgba(30, 30, 35, 220);
                border-radius: 15px;
            }
        """)
        self.bg_layout = QVBoxLayout(self.bg_frame)
        self.bg_layout.setContentsMargins(20, 20, 20, 20)
        self.bg_layout.setSpacing(15)
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º —Ñ—Ä–µ–π–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–µ–π–∞—É—Ç
        self.main_layout.addWidget(self.bg_frame)
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å –∞–≤—Ç–æ—Ä–µ—Å–∞–π–∑–æ–º
        self.query_input = QTextEdit()
        self.query_input.setPlaceholderText("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ? –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥...")
        self.query_input.setAcceptRichText(False)
        self.query_input.setStyleSheet("""
            QTextEdit {
                background-color: rgba(45, 45, 50, 150);
                color: white;
                border: none;
                border-radius: 10px;
                padding: 10px;
                font-size: 14px;
            }
        """)
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –≤—ã—Å–æ—Ç—ã –¥–ª—è –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª—è 4 —Å—Ç—Ä–æ–∫
        line_height = QFontMetrics(self.query_input.font()).lineSpacing()
        self.query_input.setMinimumHeight(line_height + 30)  # +30 –¥–ª—è —É—á–µ—Ç–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –æ—Ç—Å—Ç—É–ø–æ–≤
        self.query_input.setMaximumHeight(line_height * 4 + 30)  # –ú–∞–∫—Å–∏–º—É–º 4 —Å—Ç—Ä–æ–∫–∏, –ø–æ—Ç–æ–º —Å–∫—Ä–æ–ª–ª
        self.bg_layout.addWidget(self.query_input)
        
        # –õ–µ–π–∞—É—Ç –¥–ª—è –ø–æ–ª—è –æ—Ç–≤–µ—Ç–∞ –∏ –∫–Ω–æ–ø–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        self.response_layout = QVBoxLayout()
        
        # –ü–æ–ª–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞ (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å–∫—Ä—ã—Ç–æ)
        self.response_output = QTextEdit()
        self.response_output.setReadOnly(True)
        self.response_output.setVisible(False)
        self.response_output.setStyleSheet("""
            QTextEdit {
                background-color: rgba(45, 45, 50, 120);
                color: white;
                border: none;
                border-radius: 10px;
                padding: 10px;
                font-size: 14px;
            }
        """)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–æ–ª—è –æ—Ç–≤–µ—Ç–∞ –∏ –∫–Ω–æ–ø–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        self.response_container = QWidget()
        self.response_container.setVisible(False)
        self.response_container_layout = QHBoxLayout(self.response_container)
        self.response_container_layout.setContentsMargins(0, 0, 0, 0)
        self.response_container_layout.setSpacing(10)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –æ—Ç–≤–µ—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        self.response_container_layout.addWidget(self.response_output, 1)
        
        # –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –ª–µ–π–∞—É—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        self.copy_button_layout = QVBoxLayout()
        self.copy_button_layout.setContentsMargins(0, 0, 0, 0)
        self.copy_button_layout.setSpacing(0)
        
        # –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        self.copy_button = QPushButton("üìã")
        self.copy_button.setToolTip("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
        self.copy_button.setStyleSheet("""
            QPushButton {
                background-color: rgba(60, 60, 65, 150);
                color: white;
                border: none;
                border-radius: 5px;
                padding: 5px;
                font-size: 14px;
                min-width: 30px;
                max-width: 30px;
                min-height: 30px;
                max-height: 30px;
            }
            QPushButton:hover {
                background-color: rgba(80, 80, 85, 200);
            }
        """)
        self.copy_button.clicked.connect(self._copy_response)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –ª–µ–π–∞—É—Ç —Å —Ä–∞—Å—Ç—è–∂–∫–æ–π —Å–≤–µ—Ä—Ö—É
        self.copy_button_layout.addStretch(1)
        self.copy_button_layout.addWidget(self.copy_button)
        self.copy_button_layout.addStretch(1)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –ª–µ–π–∞—É—Ç –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        self.response_container_layout.addLayout(self.copy_button_layout)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–µ–π–∞—É—Ç
        self.bg_layout.addWidget(self.response_container)
        
        # –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—Ä–∏–∏ (–∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤–∏–¥–∏–º)
        self.history_list = QListWidget()
        self.history_list.setStyleSheet("""
            QListWidget {
                background-color: transparent;
                color: white;
                border: none;
                font-size: 14px;
            }
            QListWidget::item {
                padding: 8px;
                margin: 2px 0px;
                border-radius: 5px;
            }
            QListWidget::item:hover {
                background-color: rgba(60, 60, 65, 150);
            }
            QListWidget::item:selected {
                background-color: rgba(70, 130, 180, 150);
            }
        """)
        self.bg_layout.addWidget(self.history_list)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏
        self.status_layout = QHBoxLayout()
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ –∏ —Å—Ç–∞—Ç—É—Å
        self.status_label = QLabel("Ctrl+Shift+S –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞")
        self.status_label.setStyleSheet("color: rgba(200, 200, 200, 150); font-size: 11px;")
        self.status_layout.addWidget(self.status_label)
        
        # –†–∞—Å–ø–æ—Ä–∫–∞
        self.status_layout.addStretch(1)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        self.cancel_button = QPushButton("‚úï")
        self.cancel_button.setToolTip("–ó–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ (Esc)")
        self.cancel_button.setStyleSheet("""
            QPushButton {
                background-color: rgba(180, 40, 40, 150);
                color: white;
                border: none;
                border-radius: 15px;
                padding: 5px;
                font-size: 12px;
                min-width: 30px;
                max-width: 30px;
                min-height: 30px;
                max-height: 30px;
            }
            QPushButton:hover {
                background-color: rgba(220, 40, 40, 200);
            }
        """)
        self.cancel_button.clicked.connect(self.hide)
        
        # –ö–Ω–æ–ø–∫–∞ —Å—Ç–æ–ø (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏)
        self.stop_button = QPushButton("‚èπ")
        self.stop_button.setToolTip("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é (Esc)")
        self.stop_button.setStyleSheet("""
            QPushButton {
                background-color: rgba(40, 120, 180, 150);
                color: white;
                border: none;
                border-radius: 15px;
                padding: 5px;
                font-size: 12px;
                min-width: 30px;
                max-width: 30px;
                min-height: 30px;
                max-height: 30px;
            }
            QPushButton:hover {
                background-color: rgba(40, 150, 220, 200);
            }
        """)
        self.stop_button.clicked.connect(self._stop_generation)
        self.stop_button.setVisible(False)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ 
        self.status_layout.addWidget(self.stop_button)
        self.status_layout.addWidget(self.cancel_button)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω—ã–π –ª–µ–π–∞—É—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–π
        self.bg_layout.addLayout(self.status_layout)
    
    def _connect_signals(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        # –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        self.esc_shortcut = QShortcut(QKeySequence("Esc"), self)
        self.esc_shortcut.activated.connect(self._handle_escape)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ Enter (–µ—Å–ª–∏ –Ω–µ –∑–∞–∂–∞—Ç Shift –∏–ª–∏ Ctrl)
        self.query_input.installEventFilter(self)
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        self.query_input.textChanged.connect(self._on_input_changed)
        
        # –ö–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É –∏—Å—Ç–æ—Ä–∏–∏
        self.history_list.itemClicked.connect(self._on_history_item_clicked)
    
    def eventFilter(self, obj, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –Ω–∞–∂–∞—Ç–∏—è Enter"""
        from PyQt6.QtCore import QEvent
        from PyQt6.QtGui import QKeyEvent
        
        if obj is self.query_input and event.type() == QEvent.Type.KeyPress:
            # –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã - –æ–Ω–æ —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è QKeyEvent
            if isinstance(event, QKeyEvent):
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ (–±–µ–∑ Shift –∏–ª–∏ Ctrl)
                if (event.key() == Qt.Key.Key_Return or 
                    event.key() == Qt.Key.Key_Enter):
                    
                    # –ï—Å–ª–∏ –∑–∞–∂–∞—Ç—ã Shift –∏–ª–∏ Ctrl, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏
                    if not (event.modifiers() & (Qt.KeyboardModifier.ShiftModifier | 
                                                Qt.KeyboardModifier.ControlModifier)):
                        self._on_send_clicked()
                        return True
        
        return super().eventFilter(obj, event)
    
    def _handle_escape(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è Escape"""
        if self.is_generating:
            # –ï—Å–ª–∏ –∏–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—ë
            self._stop_generation()
        else:
            # –ò–Ω–∞—á–µ —Å–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
            self.hide()
    
    def _on_input_changed(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞"""
        text = self.query_input.toPlainText().strip()
        
        if not text and self.current_mode != Mode.HISTORY:
            # –ï—Å–ª–∏ –ø–æ–ª–µ –ø—É—Å—Ç–æ–µ, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º –∏—Å—Ç–æ—Ä–∏–∏
            self._switch_mode(Mode.HISTORY)
        elif text and self.current_mode == Mode.HISTORY:
            # –ï—Å–ª–∏ –≤–≤–µ–ª–∏ —Ç–µ–∫—Å—Ç, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞
            self._switch_mode(Mode.INPUT)
    
    def _switch_mode(self, new_mode):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ä–µ–∂–∏–º–∞–º–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        Args:
            new_mode (Mode): –ù–æ–≤—ã–π —Ä–µ–∂–∏–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        """
        self.current_mode = new_mode
        
        # –ê–Ω–∏–º–∞—Ü–∏—è —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞
        if new_mode == Mode.HISTORY:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é, —Å–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª–µ –æ—Ç–≤–µ—Ç–∞
            self.history_list.setVisible(True)
            self.response_container.setVisible(False)
            self.query_input.setPlaceholderText("–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ? –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥...")
            
            # –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
            self.query_input.clear()
            self.query_input.setFocus()
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
            self.screenshot = None
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
            self.status_label.setText("Ctrl+Shift+S –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞")
            
        elif new_mode == Mode.ANSWER:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç, —Å–∫—Ä—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            self.history_list.setVisible(False)
            self.response_container.setVisible(True)
            self.response_output.setVisible(True)
            
            # –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞
            self.query_input.setPlaceholderText("–ó–∞–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ ? –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏...")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º
            if self.screenshot:
                self.status_label.setText("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
            else:
                self.status_label.setText("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
            
        self.repaint()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    
    def _on_send_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞"""
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
        query = self.query_input.toPlainText().strip()
        
        # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        if not query:
            return
        
        # –ï—Å–ª–∏ —É–∂–µ –∏–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        if self.is_generating:
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        self.is_generating = True
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –æ—Ç–≤–µ—Ç
        if hasattr(self, 'current_response'):
            delattr(self, 'current_response')
        
        # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –æ—Ç–≤–µ—Ç–∞
        self.response_output.clear()
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞
        self._switch_mode(Mode.ANSWER)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        self.stop_button.setVisible(True)
        self.status_label.setText("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞...")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        self.send_request.emit(query, self.screenshot)
    
    def _stop_generation(self):
        """–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞"""
        if self.is_generating:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞–∫ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            if hasattr(self, 'current_response'):
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏
                self.current_response += "\n\n*–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º*"
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ HTML
                html_content = markdown.markdown(self.current_response)
                self.response_output.setHtml(html_content)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            self.stop_generation.emit()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            self._reset_generation_state()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            self.status_label.setText("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    def _reset_generation_state(self):
        """–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞"""
        self.is_generating = False
        self.stop_button.setVisible(False)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        self._load_history()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        self.status_label.setText("–ì–æ—Ç–æ–≤–æ ‚Ä¢ Ctrl+Shift+S –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º")
    
    def on_screenshot_captured(self, screenshot):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—Ö–≤–∞—á–µ–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ –ø–æ—Å–ª–µ –∑–∞—Ö–≤–∞—Ç–∞ –∏ —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –µ–≥–æ
        self.center_on_screen()
        self.show()
        self.activateWindow()
        self.raise_()
        
        if screenshot is not None:
            self.screenshot = screenshot
            self.status_label.setText("–°–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω ‚Ä¢ Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
    
    def on_response_received(self, response):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–Ω–µ –ø–æ—Ç–æ–∫–æ–≤—ã–π)"""
        self.on_generation_complete(response)
    
    def on_response_chunk(self, chunk):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ –ø–æ—Ç–æ–∫–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ –æ—Ç–≤–µ—Ç–∞
        current_text = self.response_output.toHtml()
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —á–∞–Ω–∫, –æ—á–∏—â–∞–µ–º –ø–æ–ª–µ
        if not hasattr(self, 'current_response'):
            self.current_response = ""
            self.response_output.clear()
            current_text = ""
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–º—É –æ—Ç–≤–µ—Ç—É
        self.current_response += chunk
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Markdown –≤ HTML
        html_content = markdown.markdown(self.current_response)
        self.response_output.setHtml(html_content)
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ –µ—â–µ –Ω–µ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å
        if self.current_mode != Mode.ANSWER:
            self._switch_mode(Mode.ANSWER)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            self.stop_button.setVisible(True)
            self.status_label.setText("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞...")
    
    def on_generation_complete(self, full_response):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞"""
        # –ï—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        if not self.is_generating:
            return
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç
        self.current_response = full_response
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Markdown –≤ HTML
        html_content = markdown.markdown(full_response)
        self.response_output.setHtml(html_content)
        
        # –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        self.stop_button.setVisible(False)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É
        if self.screenshot:
            self.status_label.setText("–û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç–∞")
        else:
            self.status_label.setText("–û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        self.is_generating = False
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤
        self._load_history()
    
    def _load_history(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤"""
        # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫
        self.history_list.clear()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤)
        if hasattr(self.app, 'db_manager'):
            history_items = self.app.db_manager.get_history(limit=10, offset=0)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å–ø–∏—Å–æ–∫
            if history_items:
                for item in reversed(history_items):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É
                    # –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞
                    list_item = QListWidgetItem(item['query'][:60] + ('...' if len(item['query']) > 60 else ''))
                    list_item.setToolTip(item['query'])
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —ç–ª–µ–º–µ–Ω—Ç
                    list_item.setData(Qt.ItemDataRole.UserRole, item)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–æ–∫
                    self.history_list.addItem(list_item)
    
    def _on_history_item_clicked(self, item):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É –∏—Å—Ç–æ—Ä–∏–∏"""
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç–∞
        history_item = item.data(Qt.ItemDataRole.UserRole)
        
        if history_item:
            # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–æ–º –∑–∞–ø—Ä–æ—Å–∞
            self.query_input.setPlainText(history_item['query'])
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç
            self.response_output.setPlainText(history_item['response'])
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞
            self._switch_mode(Mode.ANSWER)
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–æ—Ç–≤–µ—Ç —É–∂–µ –≥–æ—Ç–æ–≤)
            self.is_generating = False
            self.stop_button.setVisible(False)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            self.status_label.setText("–ò–∑ –∏—Å—Ç–æ—Ä–∏–∏ ‚Ä¢ Ctrl+Shift+S –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º")
    
    def show_hide(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if self.isVisible():
            # –ï—Å–ª–∏ –æ–∫–Ω–æ –≤–∏–¥–Ω–æ, —Å–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
            self.hide()
        else:
            # –ï—Å–ª–∏ –æ–∫–Ω–æ —Å–∫—Ä—ã—Ç–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –∏ —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º
            self.center_on_screen()
            self.show()
            self.activateWindow()
            self.raise_()
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
            self.query_input.setFocus()
    
    def center_on_screen(self):
        """–¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ"""
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞ (—Å —É—á–µ—Ç–æ–º –ø–∞–Ω–µ–ª–∏ –∑–∞–¥–∞—á)
        screen = QApplication.primaryScreen()
        screen_geometry = screen.availableGeometry()
        
        # –°–æ–∑–¥–∞–µ–º –≥–µ–æ–º–µ—Ç—Ä–∏—é –æ–∫–Ω–∞ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
        frame_geometry = self.frameGeometry()
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–Ω—Ç—Ä –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –æ–∫–Ω–∞ –≤ —Ü–µ–Ω—Ç—Ä —ç–∫—Ä–∞–Ω–∞
        frame_geometry.moveCenter(screen_geometry.center())
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –æ–∫–Ω–æ –≤ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
        self.move(frame_geometry.topLeft())
    
    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏ —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
        self.app.settings.setValue("mainwindow/geometry", self.saveGeometry())
        # –°–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –≤–º–µ—Å—Ç–æ –∑–∞–∫—Ä—ã—Ç–∏—è
        self.hide()
        event.ignore()
    
    def mousePressEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏"""
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –æ–∫–Ω–∞
        if event.button() == Qt.MouseButton.LeftButton:
            self._drag_pos = event.globalPosition().toPoint()
    
    def mouseMoveEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏"""
        # –ü–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        if hasattr(self, '_drag_pos') and event.buttons() & Qt.MouseButton.LeftButton:
            diff = event.globalPosition().toPoint() - self._drag_pos
            self.move(self.pos() + diff)
            self._drag_pos = event.globalPosition().toPoint()
    
    def _copy_response(self):
        """–ö–æ–ø–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"""
        if hasattr(self, 'current_response'):
            clipboard = QApplication.clipboard()
            clipboard.setText(self.current_response)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏
            previous_text = self.status_label.text()
            self.status_label.setText("–û—Ç–≤–µ—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
            self.status_label.setStyleSheet("color: rgba(100, 220, 100, 200); font-size: 11px;")
            
            # –ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–µ–∫—Å—Ç
            QTimer.singleShot(2000, lambda: self._reset_status_label(previous_text))
    
    def _reset_status_label(self, text):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–µ–∫—Å—Ç –∏ —Å—Ç–∏–ª—å"""
        self.status_label.setText(text)
        self.status_label.setStyleSheet("color: rgba(200, 200, 200, 150); font-size: 11px;")